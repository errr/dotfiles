bootstrap_tmux() {
    local screen="${1:-RND$RANDOM}"
    local prefix="${2:-T}"
    local failmax="${3:-10}"

    type -p tmux >/dev/null \
        || { echo $(caller) WARNING: "no tmux no hamburgers!" >&2
             return; }

    shopt -s execfail \
        || { echo $(caller) WARNING: "no execfail? prehistoric bash?" >&2
             return; }

    local failcount=0
    while [ "$failcount" -lt "$failmax" ]
    do
        if ! $(tmux has -t "$prefix-$screen"); then
            local x="$(tmux ls -F '#{session_attached}#S' \
                 | grep "^.$prefix-" | sort | head -n1)"

            case "$x" in
                "" ) tmux new -d -s "$prefix-$screen" ;;
                0* ) tmux rename -t "${x:1}" "$prefix-$screen" ;;
                1* ) tmux new -d -s "$prefix-$screen" -t "${x:1}" ;;
            esac
        fi \
            && exec tmux attach -t "$prefix-$screen" \
                || let failcount++
    done
}

bootstrap_bash() {
    local x="$(hash -r && type -p bash)"

    if [ "$x" -a "$x" != "$SHELL" ]; then
        export SHELL="$x"
        exec -l "$x"
    fi
}

q() {
    if [ -t 0 ]; then
        if [ $# -gt 0 ]; then
            printf '%s\0' "$@" | q
        fi
    else
        xargs -0 bash -c 'printf "%q\n" "$@"' --
    fi
}

sourceall() {
    local x

    for x in "$@"; do
        local f="$(readlink -f "$x")"
        if [ -d "$f" ]; then
            while read; do
                source "$REPLY"
            done <<< "$(find -L "$f" -type f -a -readable -print0 | sort -z | q)"
        else
            echo $(caller) WARNING: "can't source dir '$x'." >&2
        fi
    done
}

pathset() {
    declare -a rs
    local x

    for x in "$@"; do
        while read -d : ; do
            [ "$REPLY" ] || continue
            for p in "${rs[@]}"; do
                [ "$REPLY" != "$p" ] || continue 2
            done
            rs+=("$REPLY")
        done <<< "$x:"
    done

    declare r="${rs[0]}"

    for x in "${rs[@]:1}"; do
        r="$r:$x"
    done

    echo -n "$r"
}

ts() {
    case $# in
        1 ) test "$1" && echo -n "$1" ;;
        2 ) test "$1" "$2" && echo -n "$2" ;;
        3 ) ts "$1" || echo -n "$3" ;;
        4 ) ts "$1" "$2" || echo -n "$4" ;;
    esac
}

bash_defaults() {
    set +H
    stty -ixon

    shopt -s \
          histappend cdspell direxpand dirspell extglob globstar \
          nocaseglob progcomp no_empty_cmd_completion gnu_errfmt \
          2>/dev/null

    complete -r

    local x
    for x in sudo xargs parallel which man; do
        complete -cf "$x"
    done


    HISTCONTROL="erasedups"
    HISTIGNORE=$'[ \t]*:&:exit:ls:ll:dir:vdir:ds:pwd:date:history:bg:bg *:fg:fg *:jobs:pushd .:popd:+:-:cd ..:cd..:..'
    HISTFILESIZE=10000
    HISTSIZE=10000
    PROMPT_COMMAND="history -a"
    CDPATH=".:~:~/my"
    GLOBIGNORE=".:.."

    export LESS="-M -i -R -Q"


    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUPSTREAM="auto"

    if [ "$SHELLFICTION_GIT_WORKDIRS" ]; then
        gb() {
            if type -t git __git_ps1 >/dev/null; then
                while read -d : ; do
                    if [[ $PWD = $REPLY/* ]]; then
                        __git_ps1
                        return
                    fi
                done <<< "$SHELLFICTION_GIT_WORKDIRS"
            fi
        }
    else
        gb() { :; }      
    fi

    case "$TERM" in
        "screen-256color"* | "rxvt-unicode"* | "xterm-256color"* | "putty" )
            PS1=$(
                t='test $? = 0 -o $? = 128 -o $? = 147 -o $? = 148'
                e0='$ '
                e1='\[\e[31m\]!\[\e[0m\] '
                xinf='$USER@$HOST$(test $COLUMNS)'
                x='\a\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[38;5;242m\]$(gb)\[\e[0m\]\n'
                printf '$(%s && echo -e "%s" || echo -e "%s")' "$t" "$x$e0" "$x$e1"
               )
            ;;
        * )
            PS1='\a\n\u@\h \w\n\$ '
            ;;
    esac


    alias -- +='pushd .'
    alias -- -='popd'
    alias -- ..='cd ..'
    alias -- cd..='cd ..'
    alias -- ls='ls -AhF --color=auto'
    alias -- dir='ls --color=auto --format=vertical'
    alias -- vdir='ls --color=auto --format=long'
    alias -- ll='ls -lAhF --color=auto'
    alias -- ds='du -ah --apparent-size --max-depth=1'
    alias -- rs='rsync -avC --progress'
    alias -- map='while read -r'
    alias -- map0="while read -r -d $'\0'"
    alias -- show='tail -n +1'

    sourceall "$HOME/.bash.d"
}
